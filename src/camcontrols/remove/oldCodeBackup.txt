     





this.parsedConfig.clear();

        switch (camHandle)
        {
            case "cam1":
                parser.loadConfLines(parsedConfig, MotionCamera1.getInstance().getConfigPath());
                break;
            case "cam2":
                parser.loadConfLines(parsedConfig, MotionCamera2.getInstance().getConfigPath());
                break;
            default:
                System.err.println("Wrong cam handle detected");
                break;
        }



 switch (camHandle)
        {
            case "cam1":
                //TODO(Dominik):maybe save to temp location after that send using ssh send
                parser.createConfFile(parsedConfig, MotionCamera1.getInstance().getConfigPath());
                break;
            case "cam2":
                parser.createConfFile(parsedConfig, MotionCamera2.getInstance().getConfigPath());
                break;
            default:
                System.err.println("Wrong cam handle detected");
                break;
        }





/*
     private void handleStreamEvent() {
     Timeline timeline = new Timeline();
     timeline.setCycleCount(Animation.INDEFINITE);

     //TODO: It is lagging each time the timeline is refreshed if the furation is under 1 sec the windows is not responding at all
     KeyFrame playStream = new KeyFrame(Duration.seconds(1),//(.0200),
     new EventHandler<ActionEvent>() {

     /*
     *   Get URL and set the Image in ImageView to image on the URL
     */
    /*   @Override
     public void handle(ActionEvent event) {
     //uncoment commented for now because of errors from no url

                        
                        
     if (GLOBAL_URL != "") {
     Image image = new Image(GLOBAL_URL); // edit after I get right url
     imageView.setImage(image);
                            
     //TODO: try different container
     imageView.fitWidthProperty().bind(camContainer1.widthProperty());
     imageView.fitHeightProperty().bind(camContainer1.heightProperty());
                            
                            
     }
     }
     });

     timeline.getKeyFrames().add(playStream);
     timeline.play();
     }
    
     */


    
    /**
     * This method changes value of quality in selected camera to value of
     * 50/75/100 depending on slider value
     */
    private void handleSldrQuality()
    {
        switch (this.cBoxCam.getSelectionModel().getSelectedItem())
        {
            case "Camera 1":
                MotionCamera1.getInstance().setCamQuality((int) this.sldrQuality.getValue());//I can cast to int because the values are 50/75/100
                break;
            case "Camera 2":
                MotionCamera2.getInstance().setCamQuality((int) this.sldrQuality.getValue());//I can cast to int because the values are 50/75/100
                break;
            default://TODO(Dominik):test
                System.out.println("nothing selected");//should not happen
                break;
        }
    }


    /**
     * This method changes value of saturation in selected camera to value of 0
     * - 255 depending on slider value
     */
    private void handleSldrSaturation()
    {
        //TODO(Dominik):check of there is not better way
        switch (this.cBoxCam.getSelectionModel().getSelectedItem())
        {
            case "Camera 1":
                MotionCamera1.getInstance().setCamConstrast(getValueFromPercentage(this.sldrSaturation.getValue()));
                break;
            case "Camera 2":
                MotionCamera2.getInstance().setCamConstrast(getValueFromPercentage(this.sldrSaturation.getValue()));
                break;
            default://TODO(Dominik):test
                System.out.println("nothing selected");//should not happen
                break;
        }
    }

    /**
     * This method changes value of hue in selected camera to value of 0 - 255
     * depending on slider value
     */
    private void handleSldrHue()
    {
        //TODO(Dominik):check of there is not better way
        switch (this.cBoxCam.getSelectionModel().getSelectedItem())
        {
            case "Camera 1":
                MotionCamera1.getInstance().setCamConstrast(getValueFromPercentage(this.sldrHue.getValue()));
                break;
            case "Camera 2":
                MotionCamera2.getInstance().setCamConstrast(getValueFromPercentage(this.sldrHue.getValue()));
                break;
            default://TODO(Dominik):test
                System.out.println("nothing selected");//should not happen
                break;
        }
    }


    /**
     * This method changes value of contrast in selected camera to value of 0 -
     * 255 depending on slider value
     */
    private void handleSldrContrast()
    {
        //TODO(Dominik):check of there is not better way
        switch (this.cBoxCam.getSelectionModel().getSelectedItem())
        {
            case "Camera 1":
                MotionCamera1.getInstance().setCamConstrast(getValueFromPercentage(this.sldrContrast.getValue()));
                break;
            case "Camera 2":
                MotionCamera2.getInstance().setCamConstrast(getValueFromPercentage(this.sldrContrast.getValue()));
                break;
            default://TODO(Dominik):test
                System.out.println("nothing selected");//should not happen
                break;
        }
    }


 /**
     * This method changes value of brightness in selected camera to value of 0
     * - 255 depending on slider value
     */
    private void handlSldrBrightness()
    {
        //TODO(Dominik):cehck if there is not a better way to do this
        switch (this.cBoxCam.getSelectionModel().getSelectedItem())
        {
            case "Camera 1":
                if (!MotionCamera1.getInstance().isCamAutoBrightness())
                {
                    MotionCamera1.getInstance().setCamBrightness(getValueFromPercentage(this.sldrBrightness.getValue()));
                    break;
                }
                break;
            case "Camera 2": //TODO(Dominik):fix
                if (!MotionCamera2.getInstance().isCamAutoBrightness())
                {
                    MotionCamera2.getInstance().setCamBrightness(getValueFromPercentage(this.sldrBrightness.getValue()));
                    break;
                }
                break;
            default://TODO(Dominik):test
                System.out.println("nothing selected");//should not happen
                break;
        }

    }



package camcontrols.comunication;

import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

/**
 *
 * @author Dominik from
 * http://crunchify.com/java-mailapi-example-send-an-email-via-gmail-smtp/
 */
public class Mailertest
{

    static Properties mailServerProperties;
    static Session getMailSession;
    static MimeMessage generateMailMessage;

    public static void generateAndSendEmail() throws AddressException, MessagingException
    {

//Create mail server	
        System.out.println("\n 1st ===> setup Mail Server Properties..");
        mailServerProperties = System.getProperties();
        mailServerProperties.put("mail.smtp.port", "587");
        mailServerProperties.put("mail.smtp.auth", "true");
        mailServerProperties.put("mail.smtp.starttls.enable", "true");
        mailServerProperties.put("mail.smtp.ssl.trust", "smtp.gmail.com");
        System.out.println("Mail Server Properties have been setup successfully..");

//create mail	
        System.out.println("\n\n 2nd ===> get Mail Session..");
        getMailSession = Session.getDefaultInstance(mailServerProperties, null);
        generateMailMessage = new MimeMessage(getMailSession);
        generateMailMessage.addRecipient(Message.RecipientType.TO, new InternetAddress("target mail"));
        //generateMailMessage.addRecipient(Message.RecipientType.CC, new InternetAddress("test2@crunchify.com"));
        generateMailMessage.setSubject("Greetings from Crunchify..");
        String emailBody = "Test email by Crunchify.com JavaMail API example. " + "<br><br> Regards, <br>Crunchify Admin";
        generateMailMessage.setContent(emailBody, "text/html");
        System.out.println("Mail Session has been created successfully..");

//send mail	
        System.out.println("\n\n 3rd ===> Get Session and Send mail");
        Transport transport = getMailSession.getTransport("smtp");
        transport.connect("smtp.gmail.com", "login", "password");
        transport.sendMessage(generateMailMessage, generateMailMessage.getAllRecipients());
        transport.close();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws MessagingException
    {
        //TODO(Dominik):you have to set application settings in google security settings
        generateAndSendEmail();
        System.out.println("\n\n ===> Your Java Program has just sent an Email successfully. Check your email..");

    }

}

    
    /**
     * 
     * @param parsedConfig
     * @param targetFramerate 
     * @deprecated 
     */
    private void editFramerate(ArrayList<String> parsedConfig, String targetFramerate)
    {
        for (String line : parsedConfig)
        {
            if(line.contains("framerate"))
            {
                parser.rewriteLine(parsedConfig, targetFramerate, parsedConfig.indexOf(line));
            }
        }
    }
    
    /**
     * 
     * @param parsedConfig
     * @param targetRotation 
     * @deprecated 
     */
    private void editRotation(ArrayList<String> parsedConfig, String targetRotation)
    {
        for (String line : parsedConfig)
        {
            if(line.contains("rotate"))
            {
                parser.rewriteLine(parsedConfig, targetRotation, parsedConfig.indexOf(line));
            }
        }
    }
    
    /**
     *
     * @param parsedConfig
     * @param targetWidth
     * @param targetHeight
     */
    private void editResolution(ArrayList<String> parsedConfig, String targetWidth, String targetHeight)
    {
        for (String line : parsedConfig)
        {
            if (line.contains("width"))
            {
                parser.rewriteLine(parsedConfig, targetWidth, parsedConfig.indexOf(line));
            }
            if (line.contains("height"))
            {
                parser.rewriteLine(parsedConfig, targetHeight, parsedConfig.indexOf(line));
            }
        }
    }


        /*   this.imageView1.preserveRatioProperty().setValue(Boolean.FALSE);
         this.imageView2.preserveRatioProperty().setValue(Boolean.FALSE);
        
         this.pane1.setMinWidth(1280/2);
         this.pane2.setMinWidth(1280/2);
         //TODO(Dominik):change to relative coordinates later or change anchor pane for smthing else
         this.imageView1.setFitWidth(this.pane1.getWidth());
         this.imageView1.setFitHeight(this.mainPane.getHeight()-40);
        
         this.imageView2.setFitWidth(this.pane2.getWidth());
         this.imageView2.setFitHeight(this.mainPane.getHeight()-40);
        
         //  this.imageView1.fitWidthProperty().bind(this.pane1.widthProperty());
         //   this.imageView2.fitWidthProperty().bind(this.pane2.widthProperty());*/
        //TODO(Dominik):fix in scene editor later
        //this.pane1.fillWidthProperty().setValue(Boolean.TRUE);


//TODO(Dominik):Maybe make this as fxml window too ?
    /**
     * This methods show basic about popup window
     *
     */
    public void createAboutWindow()
    {
        //initialize dialog
        Stage stage = new Stage();
        stage.initStyle(StageStyle.UTILITY);

        //Create button
        Button btnClose = new Button("Close");
        btnClose.setAlignment(Pos.BOTTOM_CENTER);

        //hand close operation of the button
        btnClose.setOnAction(new EventHandler<ActionEvent>()
        {
            @Override
            public void handle(ActionEvent event)
            {
                System.out.println("Closing the about window...");
                stage.close();
            }
        });

        //create Label with about
        Label lbl = new Label("Help Help\nHelp Help\nHelp Help\nHelp Help\nHelp Help\nHelp Help\nHelp Help\nHelp Help\nHelp Help\nHelp Help\n");

        //put vBox in stage
        VBox vbHelp = new VBox();
        vbHelp.setSpacing(50);

        //set everything to center and make tex label expand
        VBox.setVgrow(lbl, Priority.ALWAYS);
        vbHelp.alignmentProperty().set(Pos.TOP_CENTER);

        //add everzthing to vBox
        vbHelp.getChildren().addAll(lbl, btnClose);

        //add everything to scene
        Scene scene = new Scene(vbHelp, 200, 250);

        //show dialog
        stage.setScene(scene);
        stage.setTitle("Help");
        stage.show();
    }    



<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.*?>
<?import java.lang.*?>
<?import java.util.*?>
<?import javafx.scene.*?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>


<AnchorPane id="AnchorPane" fx:id="mainPane" prefHeight="400.0" prefWidth="600.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8" fx:controller="camcontrols.FXMLOptionsController">
    <children>
        <VBox layoutX="259.0" layoutY="71.0" prefHeight="400.0" prefWidth="600.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
            <children>
                <TabPane prefHeight="200.0" prefWidth="200.0" tabClosingPolicy="UNAVAILABLE" VBox.vgrow="ALWAYS">
                    <tabs>
                        <Tab text="Cam1">
                            <content>
                                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="185.0" prefWidth="600.0" style="-fx-background-color: RED;" />
                            </content>
                        </Tab>
                        <Tab text="Cam2">
                            <content>
                                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" style="-fx-background-color: blue;" />
                            </content>
                        </Tab>
                        <Tab text="Cam3">
                            <content>
                                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" style="-fx-background-color: green;" />
                            </content>
                        </Tab>
                        <Tab text="Cam4">
                            <content>
                                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0" style="-fx-background-color: yellow;" />
                            </content>
                        </Tab>
                    </tabs>
                </TabPane>
                <AnchorPane prefHeight="30.0" prefWidth="200.0" style="-fx-background-color: purple;">
                    <children>
                        <HBox alignment="CENTER" layoutX="177.0" layoutY="-34.0" prefHeight="66.0" prefWidth="600.0" spacing="20.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
                            <children>
                                <Button fx:id="applyButton" mnemonicParsing="false" onAction="#handleButtonApplyButton" text="Apply" />
                                <Button fx:id="cancelButton" mnemonicParsing="false" onAction="#handleButtonCancelButton" text="Cancel" />
                            </children>
                            <opaqueInsets>
                                <Insets />
                            </opaqueInsets>
                        </HBox>
                    </children>
                </AnchorPane>
            </children>
        </VBox>
    </children>
</AnchorPane>

//test buttons
    @FXML
    private Button btnCamera1Bigger;

    @FXML
    private Button btnCamera2Bigger;

    @FXML
    private Button btnCamera3Bigger;

    @FXML
    private Button btnCamera4Bigger;

    @FXML
    private Button btnDefaultCameraSize;

    @FXML
    private Button btnTestStream;


    private void resizGrid(){
 
         ColumnConstraints col1 = new ColumnConstraints();
         col1.setPercentWidth(75);
         ColumnConstraints col2 = new ColumnConstraints();
         col2.setPercentWidth(25);
         cameraGrid.getColumnConstraints().clear();
         cameraGrid.getColumnConstraints().addAll(col1,col2);

         RowConstraints row1 = new RowConstraints();
         row1.setPercentHeight(75);
         RowConstraints row2 = new RowConstraints();
         row2.setPercentHeight(25);
         cameraGrid.getRowConstraints().clear();
         cameraGrid.getRowConstraints().addAll(row1,row2);
         
    }
    
 /* if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {
         if (this.cam1.isIsFocused() && this.cam1.isIsHighlighted()) {
         //TODO(Dominik): maybe move camera focusing into motionCamera?
         this.setDefaultGrid(colCon1, colCon2, row1Con, row2Con);
         this.cam1.setIsFocused(false);
         } else if (!this.cam1.isIsFocused() && this.cam1.isIsHighlighted()) {
         //TODO(Dominik): Create makeBigger method for cameras and get rid of button methods
         this.handleButtonCam1Bigger(null);
         this.cam1.setIsFocused(true);

         }
         }*/



    /**
     *
     * @param event
     */
    @FXML
    private void handleCam1HighlightEvent(final MouseEvent mouseEvent)
    {
        this.pane1.setStyle("-fx-background-color: orange;");
    }

    /**
     *
     * @param mouseEvent
     */
    @FXML
    private void handleCam1UnHighlightEvent(final MouseEvent mouseEvent)
    {
        this.pane1.setStyle("-fx-background-color: black;");
    }

    /**
     *
     * @param event
     */
    @FXML
    private void handleCam2HighlightEvent(final MouseEvent mouseEvent)
    {
        this.pane2.setStyle("-fx-background-color: orange;");
    }

    /**
     *
     * @param mouseEvent
     */
    @FXML
    private void handleCam2UnHighlightEvent(final MouseEvent mouseEvent)
    {
        this.pane2.setStyle("-fx-background-color: black;");
    }
    
    /**
     *
     * @param event
     */
    @FXML
    private void handleCam3HighlightEvent(final MouseEvent mouseEvent)
    {
        this.pane3.setStyle("-fx-background-color: orange;");
    }

    /**
     *
     * @param mouseEvent
     */
    @FXML
    private void handleCam3UnHighlightEvent(final MouseEvent mouseEvent)
    {
        this.pane3.setStyle("-fx-background-color: black;");
    }
    
    /**
     *
     * @param event
     */
    @FXML
    private void handleCam4HighlightEvent(final MouseEvent mouseEvent)
    {
        this.pane4.setStyle("-fx-background-color: orange;");
    }

    /**
     *
     * @param mouseEvent
     */
    @FXML
    private void handleCam4UnHighlightEvent(final MouseEvent mouseEvent)
    {
        this.pane4.setStyle("-fx-background-color: black;");
    }
    